---
import portfolioImage from "../public/images/portfolio.svg";
import { Image } from "astro:assets";
import GithubIconBlack from "../public/images/GithubIconBlack.svg";
import GitHubIconWhite from "../public/images/GitHubIconWhite.svg";
import WebsiteIconBlack from "../public/images/WebsiteIconBlack.svg";
import WebsiteIconWhite from "../public/images/WebsiteIconWhite.svg";

const { image, description, title, gitHub, liveSite } = Astro.props;
---

<div class="min-h-screen overflow-hidden killMe md:p-20 p-8 relative">
  <div
    class="h-full flex flex-col border-4 md:border-r-0 rounded-xl drop-shadow-3xl border-dark bg-projectCardBg"
  >
    <p
      class="text-xl md:text-3xl flex justify-between items-center text-dark border-2 border-b-4 rounded-t-md border-dark p-4 bg-secondary"
    >
      {title}
      <img class="h-14" src={portfolioImage.src} />
    </p>

    <div class="min-h-[60vh] w-full flex flex-col md:flex-row">
      <div class="h-1/2 md:h-3/4 w-full md:w-1/2 mt-2 mx-4 pr-8 md:pr-0">
        <Image
          loading="lazy"
          src={image}
          alt="projectImage2"
          class="object-cover object-top min-h-[30vh] h-full w-full border-4 md:border-r-0 rounded-xl drop-shadow-3xl border-dark"
        />

        <div
          class="flex flex-col md:flex-row gap-4 pt-3 pl-1 text-2xl md:text-3xl font-extrabold text-dark"
        >
          <a
            href={liveSite}
            target="_blank"
            class="hover:translate-y-[-5px] flex gap-2 drop-shadow-3xl bg-drawerBackground border-dark border-4 p-2 project-info-link-underline project-info-link-underline-black"
          >
            <span> Live Site </span>
            <Image
              class="darkIcon"
              height="30"
              width="30"
              alt="gitHubImage"
              src={WebsiteIconBlack}
            />
            <Image
              class="whiteIcon"
              height="30"
              width="30"
              alt="gitHubImage"
              src={WebsiteIconWhite}
            />
          </a>

          <a
            href={gitHub}
            target="_blank"
            class="hover:translate-y-[-5px] flex gap-2 drop-shadow-3xl bg-drawerBackground border-dark border-4 p-2 project-info-link-underline project-info-link-underline-black"
          >
            <span> GitHub </span>
            <Image
              class="darkIcon"
              height="30"
              width="30"
              alt="gitHubImage"
              src={GithubIconBlack}
            />
            <Image
              class="whiteIcon"
              height="30"
              width="30"
              alt="gitHubImage"
              src={GitHubIconWhite}
            />
          </a>
        </div>
      </div>

      <p class="text-xl w-full md:w-1/2 md:text-3xl p-6 text-dark">
        {description}
      </p>
    </div>
  </div>
</div>

<style>
  .darkIcon {
    display: var(--visibleInLightMode);
  }
  .whiteIcon {
    display: var(--visibleInDarkMode);
  }

  .project-info-link-underline > span {
    border-bottom-width: 0;
    background-image: linear-gradient(transparent, transparent),
      linear-gradient(var(--dark), var(--dark));
    background-size: 0 4px;
    background-position: 0 100%;
    background-repeat: no-repeat;
    transition: background-size 0.2s ease-in-out;
  }

  .project-info-link-black > span {
    background-image: linear-gradient(transparent, transparent),
      linear-gradient(var(--dark), var(--dark));
  }

  .project-info-link-underline:hover > span {
    background-size: 100% 4px;
    background-position: 0 100%;
  }
</style>

<script>
  import { gsap } from "gsap";

  let target = document.querySelectorAll(".killMe");

  const observer = new IntersectionObserver(
    (entrie) => {
      entrie.forEach((element) => {
        if (element.isIntersecting) {
          gsap.to(element.target, {
            left: 0,
            duration: 2,
            ease: "elastic.out(1,1)",
            force3D: true,
          });
        } else {
          gsap.to(element.target, {
            left: "45%",
            duration: 2,
            ease: "elastic.out(1,1)",
            force3D: true,
          });
        }
      });
    },
    {
      threshold: 0.4,
    },
  );

  target.forEach((target) => {
    observer.observe(target);
  });
</script>
